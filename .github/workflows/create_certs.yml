name: 3. Create Certificates
run-name: Create Certificates (${{ github.ref_name }})

on:
  workflow_call:
  workflow_dispatch:

env:
  TEAMID: ${{ secrets.TEAMID }}
  GH_PAT: ${{ secrets.GH_PAT }}
  MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
  FASTLANE_KEY_ID: ${{ secrets.FASTLANE_KEY_ID }}
  FASTLANE_ISSUER_ID: ${{ secrets.FASTLANE_ISSUER_ID }}
  FASTLANE_KEY: ${{ secrets.FASTLANE_KEY }}

jobs:
  validate:
    name: Validate
    uses: ./.github/workflows/validate_secrets.yml
    secrets: inherit

  create_certs:
    name: Certificates
    needs: validate
    runs-on: macos-15
    outputs:
      new_certificate_needed: ${{ steps.set_output.outputs.new_certificate_needed }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      # Safe patch (no parens/heredocs)
      - name: Patch Match Tables (safe)
        shell: bash
        run: |
          set -e
          TABLE_PRINTER_PATH="$(ruby -e 'puts Gem::Specification.find_by_name("fastlane").gem_dir')/match/lib/match/table_printer.rb"
          if [ -f "$TABLE_PRINTER_PATH" ]; then
            awk '!/Terminal::Table\.new\(/ {print}' "$TABLE_PRINTER_PATH" > "$TABLE_PRINTER_PATH.tmp"
            mv "$TABLE_PRINTER_PATH.tmp" "$TABLE_PRINTER_PATH"
          else
            echo "table_printer.rb not found"
            exit 1
          fi

      - name: Install Project Dependencies
        shell: bash
        run: bundle install

      - name: Sync clock
        shell: bash
        run: sudo sntp -sS time.windows.com

      - name: Check and create/update Distribution certificate and profiles if needed
        shell: bash
        run: |
          set -e
          echo "Running Fastlane certs lane..."
          bundle exec fastlane certs || true

      - name: Check Distribution certificate and launch Nuke certificates if needed
        id: check_certs
        shell: bash
        run: bundle exec fastlane check_and_renew_certificates

      - name: Set output and annotations based on Fastlane result
        id: set_output
        shell: bash
        env:
          ENABLE_NUKE_CERTS: ${{ vars.ENABLE_NUKE_CERTS }}
          FORCE_NUKE_CERTS: ${{ vars.FORCE_NUKE_CERTS }}
          DISABLE_AUTO_NUKE: ${{ vars.DISABLE_AUTO_NUKE }}
        run: |
          set -e
          CERT_STATUS_FILE="$GITHUB_WORKSPACE/fastlane/new_certificate_needed.txt"
          CERT_STATUS="false"
          if [ -f "$CERT_STATUS_FILE" ]; then
            CERT_STATUS="$(tr -d '\r\n' < "$CERT_STATUS_FILE")"
            echo "new_certificate_needed: $CERT_STATUS"
          else
            echo "Certificate status file not found. Defaulting to false."
          fi
          echo "new_certificate_needed=$CERT_STATUS" >> "$GITHUB_OUTPUT"

          # Guidance notices (no hard failure here)
          if [ "$CERT_STATUS" != "true" ] && [ "${ENABLE_NUKE_CERTS:-}" != "true" ] && [ "${DISABLE_AUTO_NUKE:-}" = "true" ]; then
            echo "::notice::üîî Automated renewal is disabled (DISABLE_AUTO_NUKE=true)."
          fi

          if [ "$CERT_STATUS" = "true" ] && [ "${DISABLE_AUTO_NUKE:-}" = "true" ] && [ "${ENABLE_NUKE_CERTS:-}" != "true" ] && [ "${FORCE_NUKE_CERTS:-}" != "true" ]; then
            echo "::notice::‚ö†Ô∏è A new certificate is needed but auto-nuke is disabled (DISABLE_AUTO_NUKE=true)."
          fi
          # Never exit 1 here ‚Äî let the nuke job decide.

  nuke_certs:
    name: Nuke certificates
    needs: [validate, create_certs]
    runs-on: macos-15
    # Auto-nuke if needed unless explicitly disabled; also allow force var
    if: ${{ (needs.create_certs.outputs.new_certificate_needed == 'true' && vars.DISABLE_AUTO_NUKE != 'true') || vars.FORCE_NUKE_CERTS == 'true' }}
    steps:
      - name: Output from step id 'check_certs'
        shell: bash
        run: echo "new_certificate_needed=${{ needs.create_certs.outputs.new_certificate_needed }}"

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        shell: bash
        run: bundle install

      - name: Run Fastlane nuke_certs
        shell: bash
        run: |
          set -e
          bundle exec fastlane nuke_certs

      - name: Recreate Distribution certificate after nuking
        shell: bash
        run: |
          set -e
          bundle exec fastlane certs

      - name: Add success annotations for nuke and certificate recreation
        if: ${{ success() }}
        shell: bash
        run: |
          echo "::warning::‚ö†Ô∏è All Distribution certificates and TestFlight profiles have been revoked and recreated."
          echo "::warning::‚ùóÔ∏è If you have other apps being distributed by GitHub Actions / Fastlane / TestFlight that do not renew automatically, run this workflow for each app."
          echo "::warning::‚úÖ Existing TestFlight builds will keep working."
